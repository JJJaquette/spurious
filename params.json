{"name":"Spurious","tagline":"A super-lightweight mock web service generator.","body":"spurious\r\n========\r\n\r\nSpurious is a JavaScript library that [Express](https://github.com/visionmedia/express) uses  to create mock web services quickly and easily.  Spurious can also generate *quality* fake data for your web services.\r\n\r\nThis library was born out of the frustration that comes with developing the front-end of an application and the back-end synchronously.  APIs that are not implemented, bugs, and other things can seriously hamper your front-end development.  As long as a resource definition is agreed upon, Spurious can generate a RESTful \"mock\" API that the front-end can consume.\r\n\r\n## Quick Start\r\n\r\nThe easiest way to get running quickly with Spurious is to clone the \r\n[Spurious sample app](https://github.com/JJJaquette/spurious-sample-app) on your local machine.\r\n\r\n```\r\ngit clone https://github.com/JJJaquette/spurious-sample-app\r\n```\r\nNext, change into the sample app's directory, install the necessary modules, and start the server.\r\n```\r\ncd spurious-sample-app\r\nnpm install\r\nnpm start\r\n```\r\nThe sample app comes with a simple Employee resource that generates 25 records.  The Employee resource is completely arbitrary.  You can remove the Employee resource, add to it, create more resources, etc.  We will get to the configuration later.  For now, you are just going to play with the Employee resource to get an idea of how Spurious works.\r\n\r\nDepending on how a resource is configure, it respond to four HTTP methods: ```GET```, ```POST```, ```PUT```, and ```DELETE```.\r\n\r\nLet's make some requests to the Employee resource.  I will use [cURL](http://curl.haxx.se/) to execute the requests, but feel free to use any tool that allows you to make HTTP requests.\r\n\r\n#### GET\r\n\r\nThere are two variations of ```GET``` that are recognized.  A list of resources can be returned as well as an individual resource.\r\n\r\nTo retrieve a list of Employees, execute the follow cURL command (or the equivalent in your tool).\r\n```\r\ncurl -i http://localhost:3000/Employee\r\n```\r\nA list of the 25 generated Employees is returned with a ```200 OK``` HTTP status.\r\n```\r\nHTTP/1.1 200 OK\r\nX-Powered-By: Express\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 2070\r\nETag: \"-1493604622\"\r\nDate: Sat, 01 Feb 2014 22:35:45 GMT\r\nConnection: keep-alive\r\n\r\n[\r\n  {\r\n    \"EmployeeId\": 1,\r\n    \"FirstName\": \"Leopoldo\",\r\n    \"LastName\": \"Howe\"\r\n  },\r\n  {\r\n    \"EmployeeId\": 2,\r\n    \"FirstName\": \"Michelle\",\r\n    \"LastName\": \"Mosciski\"\r\n  },\r\n  {\r\n    \"EmployeeId\": 3,\r\n    \"FirstName\": \"Alison\",\r\n    \"LastName\": \"Moore\"\r\n  },\r\n        ...\r\n  {\r\n    \"EmployeeId\": 25,\r\n    \"FirstName\": \"Ona\",\r\n    \"LastName\": \"Prohaska\"\r\n  }\r\n]\r\n```\r\nTo retrieve a list, just make a request for the resource without supplying an id.  Supplying an id will return a single resource.\r\n\r\n```\r\ncurl -i http://localhost:3000/Employee/25\r\n```\r\n\r\nThe single Employee resource that was requested is returned with a ```200 OK``` HTTP status.\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nX-Powered-By: Express\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 70\r\nETag: \"-46630880\"\r\nDate: Sat, 01 Feb 2014 22:40:34 GMT\r\nConnection: keep-alive\r\n\r\n{\r\n  \"EmployeeId\": 25,\r\n  \"FirstName\": \"Ona\",\r\n  \"LastName\": \"Prohaska\"\r\n}\r\n```\r\n\r\n#### POST\r\n\r\nAdding a resource is as simple as issuing a ```POST```.  \r\n\r\n```\r\ncurl -i X POST -H \"Content-Type: application/json\" -d '{\"EmployeeId\":0, \"FirstName\":\"Jean-Jacques\", \"LastName\":\"Jaquette\"}' http://localhost:3000/Employee\r\n```\r\n\r\nThe server responds with a ```201 Created``` status, and returns the new Employee resource with the updated identified.  Spurious handles generating simple autoincremented identifiers.\r\n\r\n```\r\nHTTP/1.1 201 Created\r\nX-Powered-By: Express\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 79\r\nDate: Sat, 01 Feb 2014 22:43:16 GMT\r\nConnection: keep-alive\r\n\r\n{\r\n  \"EmployeeId\": 27,\r\n  \"FirstName\": \"Jean-Jacques\",\r\n  \"LastName\": \"Jaquette\"\r\n}\r\n```\r\n\r\n#### PUT\r\n\r\nIssuing a ```PUT``` to the server on the resource will update a resource.  You must supply an identifier, so the application knows which resource to update.\r\n\r\n```\r\ncurl -i -X PUT -H \"Content-Type: application/json\" -d '{\"EmployeeId\":25, \"FirstName\":\"Baruch\", \"LastName\":\"Spinoza\"}' http://localhost:3000/Employee/25\r\n```\r\nThe updated resource is returned with a ```200 OK``` response.\r\n\r\n```\r\nHTTP/1.1 200 OK\r\nX-Powered-By: Express\r\nContent-Type: application/json; charset=utf-8\r\nContent-Length: 72\r\nDate: Sat, 01 Feb 2014 22:51:34 GMT\r\nConnection: keep-alive\r\n\r\n{\r\n  \"EmployeeId\": 25,\r\n  \"FirstName\": \"Baruch\",\r\n  \"LastName\": \"Spinoza\"\r\n}\r\n```\r\n\r\nYou can verify that the resource was updated by issuing a ```GET ``` on the resource with the appropriate identifier as shown above.\r\n\r\n#### DELETE\r\n\r\nDeleting a resource is easy, and I'm sure you can guess what you need to do.  Making a ```DELETE``` request to the server will remove the resource.\r\n\r\n```\r\ncurl -i -X DELETE http://localhost:3000/Employee/26\r\n```\r\nThe resource is removed, and the server responds with an empty body and a ```204 No Content``` status.\r\n\r\n```\r\nHTTP/1.1 204 No Content\r\nX-Powered-By: Express\r\nDate: Sat, 01 Feb 2014 22:55:14 GMT\r\nConnection: keep-alive\r\n```\r\n\r\n## Configuration\r\n\r\nThe heart of Spurious is the ```spurious.yaml``` file, and the sample app uses the following configuration.\r\n\r\n```\r\nresources:\r\n  - \r\n    name: Employee\r\n    methods:\r\n      - get\r\n      - post\r\n      - put\r\n      - delete\r\n    generate: 25\r\n    properties: \r\n      -  \r\n        name: EmployeeId\r\n        type: int\r\n        pk: true\r\n      -  \r\n        name: FirstName\r\n        faker: \r\n          category: Name\r\n          type: firstName\r\n      - \r\n        name: LastName\r\n        faker:\r\n          category: Name\r\n          type: lastName\r\n```\r\n\r\nThe configuration file is simple.  There is a list of ```resources```.  You can define as many resources as you need. \r\n\r\nEach resource has a ```name```, available HTTP ```methods```, and a list of ```properties```.  Below, I will get into which properties are required and details about what each property accomplishes.\r\n\r\n#### \"name\"\r\n\r\nThere are two names.  The resource name and the property name.  Both of these names are required.  If a resource is defined, it must have a name.  If a property is defined, it also must have a name.\r\n\r\nThe resource name is used in the URL when making requests for a resource.  In the above file, you will notice that the resource's ```name``` is ```Employee``` which directly corresponds to the \"Employee\" in the URL (e.g. ```http://localhost:3000/Employee```).\r\n\r\nThe property name is the name that is used in the JSON objects that are sent between the client and the server.  For example, in the above example, the ```Employee``` resource has three properties.  Each property has a ```name```.  Notice that the JSON object that we retrieve when making the request to ```http://localhost:3000/Employee/1``` has three properies: ```EmployeeId```, ```FirstName```, and ```LastName```.  These names, as you can guess, directly correspond to the property names defined in the configuration.\r\n\r\n#### \"methods\"\r\n\r\n```methods``` is a list of HTTP methods that the server will allow for a resource.  The available options are ```get```, ```post```, ```put```, and ```delete```.  If you try to make a request for a resource that does not allow that particular method, the server will return a ```405 Method Not Allowed``` status.\r\n\r\n#### \"properties\"\r\n\r\nProperties were discussed above in the ```\"name\"``` section.  The properties array is required to have at least one element.  You can have as many properties as you like.\r\n\r\n#### \"generate\"\r\n\r\nIf ```generate``` exists with a valid integer value, Spurious will generate that number of records.  If the ```generate``` property does not exist, no records will be generated.  You can still perform all actions on the resource.\r\n\r\n#### \"faker\"\r\n\r\nIf ```generate``` exists, one or more properties must have a ```faker``` property.  The ```faker``` property has two required properties, ```category``` and ```type```.  The two required properties correspond directly to the marvelous [Faker.js](https://github.com/marak/Faker.js/) API.  Take a look at the documentation for Faker.js to see what generated data is available.  \r\n\r\n```category``` corresponds to the top-level of the API.  For instance, ```Name```, ```Address```, ```PhoneNumber```, etc.  The ```category``` value **is** case-sensitive.\r\n\r\nThe ```type``` of ```faker``` directly corresponds to the bottom-level of the Faker.js API.  For example, ```findName```, ```phoneNumber```, ```email```, etc.  The ```type``` is also case sensitive.  \r\n\r\nTake a look at the Faker.js API.  It is really, really cool.\r\n\r\n#### \"pk\"\r\n\r\nThe ```pk``` property of an element of ```properties``` defines the resource's primary key.  One, and only one, primary key can be defined per resource.  If multiple primary keys are defined in a single resource, Spurious will spit out an error message and not load anything.  \r\n\r\nThe primary key is auto-generated.  The value of the key is always an integer and always begins at 1.  This is the value used when making requests on a resource that require an id (e.g.. ```http://localhost:3000/Employee/1```.\r\n","google":"UA-47767928-1","note":"Don't delete this file! It's used internally to help with page regeneration."}